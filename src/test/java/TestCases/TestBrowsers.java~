package TestCases;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;


import org.openqa.selenium.support.ui.*;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import org.testng.log4testng.Logger;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.openqa.selenium.support.locators.RelativeLocator.with;
import static org.testng.log4testng.Logger.getLogger;

public class TestBrowsers {

    public static Logger log;

    static {
        try {
            log = getLogger(Class.forName(TestBrowsers.class.getName()));
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    static WebDriver driver;
    static String browser = "chrome";

    //variables for ease of code
    public static String xpath;
    public static String id;
    public static String cssSelector;
    static Wait<WebDriver> fluentwait;
    static WebDriverWait wait;

    @BeforeTest
    public void setUp() {
        if (browser.equals("chrome")) {
            driver = new ChromeDriver();
        } else if (browser.equals("firefox")) {
            driver = new FirefoxDriver();
        }

        //waits
        {
            // implicit
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
            // explicit
            wait = new WebDriverWait(driver, Duration.ofSeconds(20));
            // Fluent
            fluentwait =
                    new FluentWait<>(driver)
                            .withTimeout(Duration.ofSeconds(10))
                            .pollingEvery(Duration.ofMillis(900))
                            .ignoring(NoAlertPresentException.class);
        }

        driver.manage().window().setPosition(new Point(-2000, 0));
        driver.manage().window().maximize();
//        driver.manage().window().minimize();
    }
    @AfterTest
    public static void afterTest() throws InterruptedException {
//        Thread.sleep(2000);
//        driver.close();     //close current browser
        driver.quit();      //close all the browsers
    }


    @Test
    public static void Assignment1() {
        wait.until(
                d -> {
                    try {
                        // navigate to google
                        driver.get("https://www.google.com/");
                        log.info("The navigated url is: "+driver.getCurrentUrl());

                        //search for string
                        xpath = "//*[@id=\"APjFqb\"]";
                        driver.findElement(By.xpath(xpath)).sendKeys("Way2Automation");
                        driver.findElement(By.xpath(xpath)).sendKeys(Keys.ENTER);

                        xpath = "//*[@id=\"recaptcha-anchor\"]";
                        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.xpath(xpath)));
                        driver.findElement(By.xpath(xpath)).click();
                        wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.recaptcha-checkbox-checkmark"))).click();

                        //click the first link
                        xpath = "//*[@id=\"wxVGi\"]/div/div/div/div/div/div/div[1]/div/span/a";
                        driver.findElement(By.xpath(xpath)).click();

                        //get the count of the links
                        List<WebElement> links = driver.findElements(By.tagName("a"));
                        for (WebElement link : links) {
                            String url = link.getAttribute("href");
                            System.out.println(url);
                        }

                    } catch (NoAlertPresentException e) {
                        return true; // Alert has disappeared
                    }
                    return true;
                });


    }

    @Test
    public static void Assignment2() {
        fluentwait.until(
                d -> {
                    try {
                        // navigate to google
                        driver.get("https://qa.way2automation.com/");
                        log.info("Navigated to: " + driver.getCurrentUrl());

                        // Locate 'Name' label and field
                        String xpathNameLabel = "//*[@id=\"load_form\"]/fieldset[1]/label";
                        WebElement nameLabel = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(xpathNameLabel)));
                        WebElement nameField = driver.findElement(with(By.tagName("input")).toRightOf(nameLabel));
                        nameField.sendKeys("John");

                        // Locate 'Phone' field
                        WebElement phoneField = driver.findElement(with(By.tagName("input")).below(nameField).below(nameField));
                        phoneField.sendKeys("1234567890");

                        WebElement emailField = driver.findElement(with(By.tagName("input")).below(phoneField));
                        emailField.sendKeys("john.doe@example.com");

                        WebElement countryDropdown = driver.findElement(with(By.tagName("select")).below(emailField));
                        countryDropdown.sendKeys("Bangladesh");

                        WebElement cityField = driver.findElement(with(By.tagName("input")).below(countryDropdown));
                        cityField.sendKeys("Dhaka");

                        WebElement usernameField = driver.findElement(with(By.tagName("input")).below(cityField));
                        usernameField.sendKeys("john_doe");

                        WebElement passwordField = driver.findElement(with(By.tagName("input")).below(usernameField));
                        passwordField.sendKeys("password123");

                        // Submit the form
//                        WebElement submitButton = driver.findElement(By.xpath("//*[@id=\"load_form\"]/div[1]/div[2]/input"));
                        WebElement submitButton = driver.findElement(with(By.tagName("input")).below(passwordField));
                        submitButton.click();

                        log.info("Form submitted successfully!");
                        xpath = "//*[@id=\"alert\"]";
//                        Thread.sleep(1000);
                        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(xpath))));
                        log.info("this is the alert message : " + driver.findElement(By.xpath(xpath)).getText());

                    } catch (NoAlertPresentException e) {
                        return true; // Alert has disappeared
                    }
                    return true;
                });


    }

    @Test
    public static void Assignment3() {
        fluentwait.until(
                d -> {
                    try {
                        // navigate to google
                        driver.get("https://timesofindia.indiatimes.com/poll.cms");
                        log.info("Navigated to: " + driver.getCurrentUrl());

                        xpath = "//*[@id=\"mathq2\"]";
                        wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(xpath)));
                        String mathQuestion = driver.findElement(By.xpath(xpath)).getText();

                        int result = calculateResult(mathQuestion);
                        xpath = "//*[@id=\"mathuserans2\"]";
                        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(xpath)));
                        driver.findElement(By.xpath(xpath)).sendKeys(String.valueOf(result));
                    } catch (NoAlertPresentException e) {
                    }
                    return true;
                });
    }

    @Test
    public static void Screenshots() {
        fluentwait.until(
                d -> {
                    try {
                        // navigate to google
                        driver.get("https://way2automation.com");
                        log.info("Navigated to: " + driver.getCurrentUrl());
                        Thread.sleep(2000);

                        // Get the project directory dynamically
                        String projectDir = System.getProperty("user.dir");
                        // Define the Screenshots folder path inside the project directory
                        File screenshotFolder = new File(Paths.get(projectDir, "Screenshots").toString());
                        if (!screenshotFolder.exists()) {
                            screenshotFolder.mkdirs(); // Create the folder if it doesnâ€™t exist
                        }

                        // Wait for the element to be visible before capturing it
                        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[3]/div[2]/div/a")));

                        // Full page screenshot (will only work properly in headless mode)
                        File fullPage = ((ChromeDriver) driver).getScreenshotAs(OutputType.FILE);
                        FileUtils.copyFile(fullPage, new File(screenshotFolder,"fullPage.png"));

                        // Visible page screenshot
                        File visiblePage = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
                        FileUtils.copyFile(visiblePage, new File(screenshotFolder,"visiblePage.png"));

                        // Element screenshot
                        File elementScreenshot = element.getScreenshotAs(OutputType.FILE);
                        FileUtils.copyFile(elementScreenshot, new File(screenshotFolder,"element.png"));

                    } catch (NoAlertPresentException e) {
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                    return true;
                });
    }

    public static int calculateResult(String input) {
        try {
            // Use regex to extract the operands and the operator. Improved regex to handle spaces
            Pattern pattern = Pattern.compile("(\\d+)\\s*([+\\-*/])\\s*(\\d+)\\s*=");
            Matcher matcher = pattern.matcher(input);

            if (matcher.find()) {
                int operand1 = Integer.parseInt(matcher.group(1));
                String operator = matcher.group(2);
                int operand2 = Integer.parseInt(matcher.group(3));

                switch (operator) {
                    case "+":
                        return operand1 + operand2;
                    case "-":
                        return operand1 - operand2;
                    case "*":
                        return operand1 * operand2;
                    case "/":
                        return operand1 / operand2; // Be cautious about division by zero
                    default:
                        return Integer.MIN_VALUE; // Indicate invalid operator
                }
            } else {
                return Integer.MIN_VALUE; // Indicate no match/invalid input
            }
        } catch (NumberFormatException e) {
            return Integer.MIN_VALUE; // Indicate parsing error
        } catch (ArithmeticException e){
            return Integer.MIN_VALUE; // Indicate arithmetic error like division by zero
        }
    }
}